data Bool : Type where {
    False : Bool 
  | True : Bool
}

data Nat : Type where {
   Z : Nat
 | S : pi k : Nat . Nat
}

plus : pi x : Nat . pi y : Nat . Nat;
plus = lam x. lam y . 
           case x of
              Z => y
            | S k => S (plus k y);

intToNat : pi x : Integer . Nat;
intToNat = lam x . case x of
                        0 => Z
                      | _ => S (intToNat (prim__sub_Integer x 1));

natToInt : pi x : Nat . Integer;
natToInt = lam x . case x of
                      Z => 0
                    | S k => prim__add_Integer (natToInt k) 1;

natToInt (plus (intToNat 4) (intToNat 5));
