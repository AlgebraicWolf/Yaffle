1/1: Building NatOpts (NatOpts.idr)
Main> Main.doPlus
Compile time tree: \{arg:1}, {arg:0} => plus {arg:1} {arg:0}
Compiled: \ {arg:1}, {arg:0} => {arg:1} + {arg:0}
Refers to: Prelude.Types.plus
Flags: covering
Size change: Prelude.Types.plus: [Just (0, Same), Just (1, Same)]
Main> Main.doMinus
Compile time tree: \{arg:1}, {arg:0} => minus {arg:1} {arg:0}
Compiled: \ {arg:1}, {arg:0} => Prelude.Types.prim__integerToNat ({arg:1} - {arg:0})
Refers to: Prelude.Types.minus
Refers to (runtime): Prelude.Types.prim__integerToNat
Flags: covering
Size change: Prelude.Types.minus: [Just (0, Same), Just (1, Same)]
Main> Main.doMult
Compile time tree: \{arg:1}, {arg:0} => mult {arg:1} {arg:0}
Compiled: \ {arg:1}, {arg:0} => {arg:1} * {arg:0}
Refers to: Prelude.Types.mult
Flags: covering
Size change: Prelude.Types.mult: [Just (0, Same), Just (1, Same)]
Main> Main.doCompare
Compile time tree: \{arg:1}, {arg:0} => compareNat {arg:1} {arg:0}
Compiled: \ {arg:1}, {arg:0} => Prelude.EqOrd.compare {arg:1} {arg:0}
Refers to: Prelude.Types.compareNat
Refers to (runtime): Prelude.EqOrd.compare
Flags: covering
Size change: Prelude.Types.compareNat: [Just (0, Same), Just (1, Same)]
Main> Main.doEqual
Compile time tree: \{arg:1}, {arg:0} => equalNat {arg:1} {arg:0}
Compiled: \ {arg:1}, {arg:0} => {arg:1} == {arg:0}
Refers to: Prelude.Types.equalNat
Flags: covering
Size change: Prelude.Types.equalNat: [Just (0, Same), Just (1, Same)]
Main> Bye for now!
